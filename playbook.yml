---
- name: Initial Ubuntu installation
  hosts: all
  remote_user: root
  gather_facts: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

    # Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    # User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: Disable empty password login
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitEmptyPasswords" 
        line: "PermitEmptyPasswords no"
 
    - name: Disable password login
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
       # regexp: "^(#\s*)?PasswordAuthentication " 
        regexp: "^#?PasswordAuthentication " 
        line: "PasswordAuthentication no"

    - name: Disable Challenge Response Authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?ChallengeResponseAuthentication" 
        line: "ChallengeResponseAuthentication no"

    - name: MaxAuthTries 
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?MaxAuthTries" 
        line: "MaxAuthTries 3"

    - name: ClientAliveInterval 
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?ClientAliveInterval" 
        line: "ClientAliveInterval 300"

    - name: Enable PAM
      lineinfile: 
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?UsePAM" 
        line: "UsePAM yes"

    - name: Allow only ubuntu user login
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?ChallengeResponseAuthentication" 
        line: "ChallengeResponseAuthentication no"

    - name: restart sshd
      systemd:
        name: sshd
        state: restarted

    # Install Packages
    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

    # Fail2ban
    - name: update configuration file /etc/fail2ban/fail2ban.local
      template:
        src: fail2ban/fail2ban.local.j2
        dest: /etc/fail2ban/fail2ban.local
        owner: root
        group: root
        mode: 0644
      notify: restart fail2ban 

    # UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming


    # Docker setup
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest
      notify:
        - restart_docker 


    # Telegraf setup
    - name: Add Telegraf repo 
      lineinfile:
        path: /etc/apt/sources.list.d/influxdata.list
        create: yes
        state: present
        line: 'deb https://repos.influxdata.com/ubuntu bionic stable'

    - name: Add apt signing key
      apt_key:
        url: https://repos.influxdata.com/influxdb.key
        state: present
    
    - name: Update apt packages
      apt:
        name: telegraf
        state: present
        update_cache: yes
    
    - name: Add telegraf config
      template:
        src: ./templates/telegraf.conf
        dest: /etc/telegraf/telegraf.conf
        follow: yes 
      vars:
        telegraf_name: inventory_hostname 
      notify:
        - restart_telegraf

    - name: restart telegraf 
      systemd:
        name: telegraf
        state: restarted
        enabled: yes

  handlers:
    - name: restart_sshd
      service: 
        name: ssh 
        state: restarted

    - name: restart_telegraf 
      service: 
        name: telegraf 
        state: restarted

    - name: restart_docker 
      service: 
        name: docker 
        state: restarted
