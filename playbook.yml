---
- name: Initial Ubuntu 18.04 installation
  hosts: all
  remote_user: root
  #remote_user: metis 
  #become: true
  gather_facts: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Update cache & upgrade 
      apt: 
        update_cache: yes 
        upgrade: 'yes'

    # Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    # User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: ssh config
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
        - { regexp: '^#?UsePAM', line: 'UsePAM yes' }
        - { regexp: '^#?AllowUsers', line: 'AllowUsers {{ create_user }}' }


    # Install Packages
    - name: Update apt
      apt: update_cache=yes

    - name: Install required packages
      apt: name={{ packages }} state=latest

    # Fail2ban
    - name: update configuration file /etc/fail2ban/fail2ban.local
      template:
        src: fail2ban.local
        dest: /etc/fail2ban/fail2ban.local
        owner: root
        group: root
        mode: 0644
      notify: restart_fail2ban 

    # UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: disabled
        policy: deny
        direction: incoming


    ### Docker setup. Uncomment if needed
    - name: Install Docker
      block:
        - name: Add Docker gpg key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker Repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu bionic stable
            state: present

        - name: Update apt and install docker-ce
          apt: update_cache=yes name=docker-ce state=latest
          notify:
            - restart_docker 
      when: install_docker == true

    # Telegraf setup
    - name: Add Telegraf repo 
      lineinfile:
        path: /etc/apt/sources.list.d/influxdata.list
        create: yes
        state: present
        line: 'deb https://repos.influxdata.com/ubuntu bionic stable'

    - name: Add apt signing key
      apt_key:
        url: https://repos.influxdata.com/influxdb.key
        state: present
    
    - name: Update apt packages
      apt:
        name: telegraf
        state: present
        update_cache: yes
    
    - name: Add telegraf config
      template:
        src: ./templates/telegraf.conf
        dest: /etc/telegraf/telegraf.conf
        follow: yes 
      vars:
        telegraf_name: "{{inventory_hostname}}"
      notify:
        - restart_telegraf

  handlers:
    - name: restart_ssh
      service: 
        name: ssh 
        state: restarted

    - name: restart_telegraf 
      service: 
        name: telegraf 
        state: restarted

    - name: restart_docker 
      service: 
        name: docker 
        state: restarted

    - name: restart_fail2ban
      service: 
        name: fail2ban 
        state: restarted
